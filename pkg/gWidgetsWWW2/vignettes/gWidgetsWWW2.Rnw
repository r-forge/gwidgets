\documentclass[12pt]{article}
\newcommand{\VERSION}{X.X.X}
%\VignetteIndexEntry{gWidgets}
%\VignettePackage{gWidgets}
%\VignetteDepends{methods}

\usepackage{times}              % for fonts
\usepackage[]{geometry}
\usepackage{graphicx}           % for graphics files
\usepackage{amsmath}            % for amslatex stuff
\usepackage{amsfonts}           % for amsfonts
\usepackage{url}                % for \url,
\usepackage{hyperref}
\usepackage{color}
\usepackage{fancyvrb}
\usepackage{fancyhdr}
%% Fill these in
\pagestyle{fancy}
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhf{}
\fancyhead[L]{\code{gWidgets}}
\fancyhead[C]{}
\fancyhead[R]{\sectionmark}
\fancyfoot[L]{}
\fancyfoot[C]{- page \thepage\/ -}
\fancyfoot[R]{}
\renewcommand{\headrulewidth}{0.1pt}
\renewcommand{\footrulewidth}{0.0pt}

%% My abbreviations
\newcommand{\pkg}[1]{\textbf{#1}}
\newcommand{\code}[1]{\texttt{#1}}
\newcommand{\proglang}[1]{\code{#1}}
\newcommand{\R}{\proglang{R}}
\newcommand{\javascript}{\proglang{JavaScript}}

\newenvironment{rargs}{\begin{list}{}{}}{\end{list}}


\begin{document}
\thispagestyle{plain}
\title{gwidgetswww2}

\author{John Verzani, \url{jverzani@gmail.com}}

%% Sweave stuff
\SweaveOpts{keep.source=TRUE}




\section*{Abstract:}
The \pkg{gWidgets} package provides a programming interface (an API)
to write graphical user interfaces from within R. The API trades off
power for relative simplicity and has proven useful for writing small
to moderately complicated GUIs. The \pkg{gWidgetsWWW2} package
(\url{https://github.com/jverzani/gWidgetsWWW2}) implements much of
the API for programming GUIs for the web. It uses the Ext JS
\javascript{} libraries (\url{(www.sencha.com}) to provide the toolkit
and the \pkg{Rook} package of Jeffrey Horner to integrate with \R's
local web server. The \code{nginx} web proxy can be used to serve
pages to a public audience.

As the name suggests, this is the second version of the
implementation. This one uses the newer Ext JS 4.1 libraries and
internally  uses \R's reference classes -- not the \pkg{proto} package
-- to provide mutable objects.

%\setcounter{tocdepth}{3}
%\tableofcontents

\section{Overview}

A modern set of web tools includes three primary domains: HTML for
markup of the text, CSS for the layout of the page, and \javascript{} to
manipulate the page. In addition, often there is a back end language,
such as \proglang{python}, for server-side programming. The combined
set of pre-requisites can be daunting, though clearly many have
succeeded in mastering them. The goal of this package is for the \R{}
programmer to avoid nearly all of these considerations, yet still be
able to produce interactive web sites powered by \R.

This package leverages a popular javascript library (ext from
\url{www.sencha.com}) to provide a consistent look (the CSS part) and
the javascript interactivity. \R{} is used for the ``server-side''
programming.  For serving local scripts \R's internal web server is used,
through the \pkg{Rook} package of Jeffrey Horner. For serving pages to
the greater wide world web, one can reverse proxy the \pkg{Rook} server or
integrate the framework within Simon Urbanek's \pkg{FastRWeb} cgi-bin
interface to his \pkg{Rserve} package.

The primary contribution of the package is
\begin{enumerate}
\item a means to create \javascript{}
\item a means to create the \javascript{} to produce the controls and
widgets to create the interactive GUI
\item a means to callback into the \R{} session in response to events
and return \javascript{} to manipulate the state of the page
\item a means to easily incorporate this into a web page.  These web
  pages are not centered around displaying content, but rather for
  creating interactive controls.
\end{enumerate}


To make a GUI in \pkg{gWidgets} requires two steps: writing a script
and calling that script within some web page.

<<echo=FALSE, results=hide>>=
require("gWidgetsWWW2")
suppressMessages(gwindow())
@ 

A simple script creating an interactive GUI could be as simple as:
<<>>=
w <- gwindow("simple GUI with one button", visible=FALSE)
g <- ggroup(cont = w)
b <- gbutton("click me", cont = g, handler = function(h,...) {
  gmessage("hello world", parent = b)
})
@ 
%%
(Though you'd be unimpressed with the layout of the widgets.)



If called correctly, the package translates these commands into
\javascript{} commands to manipulate a web page:

<<>>=
out <- w$dump()
head(out)
@ 




%% view a web page
The easiest way to see this webpage is to run the script through a
specific URL which is created when the \code{load\_app} command is
executed. For example, if the script above is stored as
\code{hello.R}, then this call will open the page and load the url
\url{http://127.0.01:PORT/custom/HelloApp}:

<<eval=FALSE>>=
load_app("hello.R", app_name="HelloApp")
@ 
%%
Other means to incorporate this into a web page are possible, but
require additional work.

%% handlers
Not only does the GUI get constructed, the package provides a means
to callback into the \R\/ process from the web server to further
manipulate the page. The ``handler'' in the definition of the button,
\code{b} above, is called through an AJAX call when the button is
pressed. In this case, the \code{gmessage} call produces additional
\javascript{} that causes a modal message dialog to be produced. The
handlers are written in R -- not \javascript{}. This makes them easier to
write, but slower to process, as their use requires a round trip to
the server from the web page. This process of communication between
client and server happens more often than this, as the state of the
GUI is synchronized with the \R{} process, as changes are made.



Documentation for the package is provided in help pages, but the main
\pkg{gWidgets} API is better documented in that package. (Though that
package is not a dependency and should not be loaded, as this package
is a stand alone implementation.) There are numerous package-specific
features beyond the basic \pkg{gWidgets} API. Mostly these are
implemented as reference-class methods and are documented with the
constructors.

The documentation provides a few basic uses, more complicated examples
are provided through the \code{demo}.

\section{Top level windows}

Web GUIs with \pkg{gWidgetsWWW2} are different than desktop GUIs with
\pkg{gWidgets}. Not only are they slower, as they have lag time
between the GUI and the server, there can only be one top-level
window. This is a \code{gwindow} instance called without a
\code{parent} argument.
  
Other \code{gwindow} instances are either a) subwindows (appearing as
a separate window) if the argument \code{renderTo} is not specified of
b) rendered to the DOM element with id specified by
\code{renderTo}.~\footnote{The latter allows \pkg{gWidgetsWWW2} to
  integrate with other web pages. Within a page, leave a \code{div}
  tag with an id \code{some\_id}, say, and then pass the argument
  \code{renderTo="some\_id"} to the constructor.  }

Common to all windows (and child widgets) is a single instance of the
\code{GWidgetsTopLevel} class. In order to share this, each widget
constructor requires a specification of the widget hierarchy through a
parent container (with the \code{container}) or if the widget is not
in the hierarchy, a \code{parent} argument. This toplevel instance 
stores references to each created object, processes the outgoing
\javascript{} queue, and is used to route incoming callback requests. The
callbacks are all evaluated within an environment that is also stored
within the toplevel object.  As the toplevel instance is created each
time a page is loaded, this evaluation environment is not persistent
across each page load, but is persistent while a page is active. 



\section{The containers}
\label{sec:containers}

%% basic gWidgets containers
The \pkg{gWidgetsWWW2} package implements the basic widgets of the
\pkg{gWidgets} API:
\begin{itemize}
\item the top-level container \code{gwindow} and subwindows
also constructed through \code{gwindow} (using the \code{parent} argument);
\item the box containers\code{ggroup}, \code{gframe} and \code{gexpandgroup};
\item the tabular layout container \code{glayout};
\item the notebook container \code{gnotebook};
\item the split-window container \code{gpanedgroup}.
\end{itemize}

In addition to these, the \code{ExtJS} libraries make it easy to
provides some other containers:
\begin{description}
\item[gstackwidget] This widget is similar to a notebook container,
  but without the tabs. It is part of the the \pkg{gWidgets2} API
  (\url{https://github.com/jverzani/gWidgets2}). It is useful here, as
  each new page load creates its own unique evaluation environment, so
  page loads do not share global variables. To work around this, one
  can use this widget to flip between ``pages.''
\item[gborderlayout] A common web-layout is a ``border'' layout with 5
  areas to place components: a ``center'', and 4 satellites: north,
  south, east and west. As with \code{gexpandgroup}, a user can resize
  the space allocated to each area.
\item[gformlayout] for laying out form controls with labels in a
  table. Simply pass in the label through a \code{label} argument of
  the control's constructor.  
\item[gpanel] The \code{gpanel} widget is a container for other \javascript{}
  libraries. Basically it creates a \code{DIV} tag, which can be
  overwritten by external \javascript{} calls. An example shows how the
  \code{d3} \javascript{} libraries
  (\url{http://mbostock.github.com/d3/}) can be incorporated.
\end{description}

%% dynamic
As with \pkg{gWidgets}, child components can be added and deleted from
parent containers dynamically (except for \code{glayout}). The
\code{gexpandgroup} widget can be used to hide or disclose parts of
GUI, as can \code{gpanedgroup} and \code{gborderlayout}.

%% box containers
The size of containers in \pkg{gWidgetsWWW2} is different from other
\pkg{gWidgets} implementations. When used to produce a stand-alone app
(the basic usage), the top-level window takes up the entire web
browser screen. Its child component  is allocated this entire
space. 

Box containers have the property (similar to \pkg{RGtk2}) that child
components expand to fill the space orthogonal to the direction of
packing (vertical boxes and child components that take up the maximum
horizontal space). Thus in the simple ``hello world'' example, the
horizontal box container fills the entire page, and the button
stretches vertically to fill that space -- a really tall button. A
common idiom then is to use nested containers with different packing
directions:
<<>>=
w <- gwindow("simple GUI with one button", visible=FALSE)
g <- ggroup(cont = w, horizontal=FALSE, use.scrollwindow=TRUE)
button_group <- ggroup(cont=g, horizontal=TRUE) ## opposite to g
b <- gbutton("click me", cont = button_group, handler = function(h,...) {
  gmessage("hello world", parent = b)
})
@ 
%%
The \code{use.scrollwindow=TRUE} argument will allow the GUI controls
to consume a space larger than the allocated screen space, often a
useful thing, though users may be confused if important controls are
displayed off screen.


Containers also have the odd property, that they may have no
dimension allocated to them, despite having children. You may need to
specify a height or width.  In \pkg{gWidgetsWWW2} the constructors all
have arguments \code{width} and \code{height} for specifying the
initial width and height. These take values in numbers of pixels. The
\code{size} assignment method can also take values in percentages of
allowed space, as in \code{100\%}.



\section{The widgets or controls}
\label{sec:what-works}

The standard widgets of \pkg{gWidgets} are implemented:
\begin{itemize}
\item Buttons and labels with \code{gbutton} and \code{glabel};
\item The widgets to select from a vector of values: \code{gcheckbox},
  \code{gcheckboxgroup}, \code{gradio}, \code{gcombobox};
\item The widgets to select from a range of values: \code{gslider} and
  \code{gspinbutton};
\item The text widgets \code{gedit}, for single-line edit boxes, and
  \code{gtext}, for multi-line text areas;
\item The table selection widget \code{gtable};
\item The data frame editor \code{gdf};
\item The tree widget \code{gtree}
\item Images can be viewed through \code{gimage} -- the image is a url
\item menu bars but not toolbars with \code{gmenu} and statusbars
  (\code{gstatusbar});
\item File uploads can be incorporated through \code{gfile}.
\end{itemize}


The basic dialogs are implemented (except \code{gbasicdialog}, though
there is a workaround for that functionality). These include
\code{galert}, \code{gmessage}, \code{ginput}, and \code{gcalendar}.
All require a \code{parent} argument.


No attempt has been made to include the compound widgets of \pkg{gWidgets}:
\code{gvarbrowser}, \code{ggenericwidget}, \code{gdfnotebook},
\code{ggraphicsnotebook}.

The \code{ghelp} constructor is not provided. The \pkg{helpr} package
is very useful for attractively displaying web pages within a web
browser.

In addition to the above, the package has other widgets. In addition
to the different widgets for graphics described below, there is:
\begin{description}
\item[\code{ghtml}] A widget for displaying HTML either specified as a
  string or as a URL.
\item[\code{ggooglemaps}] A widget for displaying google maps,
  described below.
\end{description}




\subsection{graphics}
\label{sec:graphics}

There is no \textit{interactive} plot device. Rather one can use a
variety of non-interactive devices and an accompanying widget.

These include:
\begin{itemize}
\item The \code{gsvg} widget can be used to display svg graphics, as
  produced by the \code{svg} driver or the \pkg{RSVGTipsDevice}
  driver. 
\item The \code{gimage} widget can be used to display graphics
  produced by the \code{png} driver, among others.
\end{itemize}

Both the last two require both a file and a url, the file to write to,
the url to use by the browser. If the file is created by
\code{get\_tempfile} the details are implemented by the widget.

The \code{gsvg} widget is used like a non-interactive device (open the
device, create the graphic, call \code{dev.off()}) though one uses a
file that can be served as a url, so replace \code{tempfile} with the
package-provided \code{get\_tempfile}, as with
\code{get\_tempfile(ext='.svg')}.  There are browser variations with SVG graphics.


%% The \code{gcanvas} device allows access to HTML5's underlying canvas
%% tag methods, allowing one to manipulate objects in the widget.  The
%% widget itself can responds to mouse clicks through a handler specified
%% with \code{addHandlerClicked}. The ``h'' argument is a list with
%% additional components \code{x} and \code{y} (containing the ndc
%% coordinates of the point with $(0,0)$ being the lower left corner) and
%% \code{X} and \code{Y} (containing the pixel coordinates of the click,
%% with $(0,0)$ being the upper left corner. The \code{x} and \code{y}
%% values can be converted into \code{user} coordinates through
%% \code{grconvertXY}, but there is a catch -- the device needs to be
%% reopened with the same dimensions, as that information is lost when
%% the device is closed. See the example \code{ex-gcanvas} for an
%% illustration.


\subsection{ggooglemaps}
\label{sec:ggooglemaps}

The \code{ggooglemaps} widget provides access to a sliver of the
google maps API. See the help page for an illustration.



\subsection{Data persistence}
\label{sec:data-persistence}

AJAX technologies are used to prevent a page load every time a request
is made of the server, but each time a page is loaded a new R session
is loaded. Any variables stored in a previous are forgotten. To keep
data persistent across pages, one can load and write data to a file or
a data base.

The \code{JsonRPCServer} class provides an alternative. This allows
the web page to call back into objects in the \R\/ processes global
workspace by method name. The help page for \code{json\_rpc\_server}
shows how this can be used for a page counter.



\section{Additional details}
\label{sec:additional-details}


There are several places where additional methods are provided by
reference class methods beyond the basic \pkg{gWidgets} API.

To step back, each constructor produces an instance of some reference
class. These instances have their own methods defined for them. The
\pkg{gWidgets} API simply dispatches to the appropriately named
method. (For example, \code{svalue} looks for \code{get\_value} and
\code{get\_index}, whereas
the assignment method looks for \code{set\_value} or
\code{set\_index}.) Reference class methods are called using \R's
object oriented notation. For widgets where some functionality was
easy to implement, though a corresponding \pkg{gWidgets} method does
not exist, just the reference class method was written.

%% toplevel things

\subsection{Toplevel object}
\label{sec:toplevel-object}


The toplevel object is stored in the \code{toplevel} property of the
objects and can be accessed as follows:
<<eval=FALSE>>=
w$toplevel
@ 
%%
This is shared among the objects:
<<>>=
identical(w$toplevel, g$toplevel)
@ 

The \code{toplevel} instance holds a reference to the request that
made the page. This can be useful to get script information (not
useful here though, as Sweave isn't calling as Rook does):
<<eval=FALSE>>=
w$toplevel$the_request$path_info()
@ 

\subsection{The toplevel window}
\label{sec:toplevel-window}


The toplevel object holds a queue of \javascript{} commands to send back
to the browser. One can add to this queue, if desired. For
convenience, each component has the method \code{add\_js\_queue} to do
so. One specifies a string of \javascript{} to passback, for example:

<<add_js_queue>>=
w$add_js_queue("alert('hello world');")
@ 

Now when the page makes a request for the server, this will also be
passed back.

By design, the server only responds to requests from the clients. One
can not push server requests to clients (as can be done with web
sockets). If such a thing is desired, the top-level window has the
method \code{start\_comet} which causes the page to poll the server
periodically, and not just in an event-driven manner.

The toplevel window can be used to get and set cookies. The methods
\code{cookies} returns the cookies available when the page is created,
the method \code{set\_cookie} can set a cookie. (A cookie set with
\code{set\_cookie} will not appear in the \code{cookies} list, as
these are from when the page is created.)


\subsection{Ext}

The underlying constructors and handlers basically do just one thing:
write out \javascript{} code for the \code{ExtJS} libraries to interpret
at the browser. Some features allow one to do this directly, if desired.

First, the constructors have the argument \code{ext.args} to specify
additional arguments to the \code{Ext} constructor. These are
specified through a named list and the package will do a conversion to
a \javascript{} object.

Next, the objects have a few methods. The \code{call\_Ext} method
takes a method name and other arguments and calls the corresponding
\code{Ext} method. The arguments are coerced from \R\/ objects. For
example, if \code{b} is a \code{gbutton} instance, then
\code{b\$call\_Ext("setVisible", FALSE)} will adjust the visibility of
the widget. (As will the call \code{visible(b) = FALSE}, in this
example.). The method \code{ext\_apply} will merge configuration
values from list.


\subsection{Debugging}
\label{sec:debugging}

Finding bugs can be tedious, as they can appear in different places:
\begin{description}
\item[R issues] Issues with R code can be detected b trying to run the
  script at the R console (\code{source}, say). One can also run the
  script locally, and see if any errors are logged at the console.
\item[\javascript{} issues] These are more subtle. Most browsers have
  some \javascript{} debugging tools built in, or easily added (e.g.,
  firebug for Mozilla). The debugger for Chrome allows one to see what
  is requested and what the response is. 
\end{description}
It is important to realize that just looking at the \proglang{HTML}
source will not help. The source for a script loaded with
\code{load\_app} simply loads some external packages and then issues a
call to get a page id and in turn a call to load the page. This call
does not appear in the page source, but rather is a response to an
AJAX request. The \javascript{} debugger can show you this response.







\section{Installation}
The local usage is configured when the package is installed. After
installation typing \code{demo(gWidgetsWWW2)} should open a page
allowing the examples to be run. The \code{load\_app} function can be
used to turn a script into a web page.

\subsection{Serving pages on the internet}
\label{sec:serving-pages}


At this point the package can be integrated in with
\pkg{nginx}, say, to serve pages to the public, or with the
\pkg{FastRWeb} package to serve pages from an \pkg{Rserve} package.

\subsubsection{Using \pkg{FastRWeb}}
\label{sec:using-pkgfastrweb}

The web pages may be viewed through a web stack of apache (or any
other web server with cgi-bin capabilities), \pkg{FastRWeb} (to provide
the cgi-bin script to interface), and \pkg{Rserve}.

Installation details are in the \code{FastRWeb} directory of the package.

The responsiveness is just okay (and that may be generous). The issue
is each AJAX request (of which there may be many in a complicated GUI)
requires a call to get the session stored for the page. These sessions
are serialized between uses, rather than kept in memory as with
Rook. The serialization can take over 500ms, whereas the processing of
the call may take 20ms or less.


\subsubsection{Using \pkg{nginx} or \pkg{apache} as a proxy for \pkg{Rook}}
\label{sec:using-pkgnginx}

We can use the \pkg{nginx} web
server or \pkg{apache} to a proxy requests to the underlying
\pkg{Rook} process. 
\begin{quotation}
  \textbf{No claim is made that this is industrial grade}. For that,
  use a real web-development stack. This should be able to handle
  moderate usage, though there are many areas where scaling will just
  plain fail. 
\end{quotation}


A basic configuration for \pkg{nginx} simple reroutes calls to the
Rook process. The \code{load\_app} call opens up port 9000 by default.


We need to make two configurations. In the
\code{/etc/nginx.conf/sites-enabled/default} file add this in the
\code{server} configuration

\begin{verbatim}
location /custom { 
  proxy_pass http://localhost:9000/custom; 
}
\end{verbatim}

And in the \code{/etc/nginx/nginx.conf} file add
\begin{verbatim}
upstream rookapp {
	 server localhost:9000;
}
\end{verbatim}


The file \code{Rook.sh} in \code{nginx} directory provides a sample
script to run to start \R{} and \pkg{Rook}. This can easily be modified.


will route all urls \url{http://you.domain.com/custom/XXX} to the
\code{Rook} process. Jeffrey Horner has more details in a gist at
\url{https://gist.github.com/6d09536d871c1a648a84}.
 
 
Each app enabled by \code{load\_app} has an option for an
``\code{app\_name}'' and this maps to the URL:
\url{http://you.domain.com/custom/app\_name/indexgw.rhtml}.


To configure \pkg{apache} one can modify the following directives to
suit their needs. If one uses something other than the localhost to
listen, then Rook should be started listening to that ip.

\begin{verbatim}
    ProxyPass  /custom http://127.0.0.1:9000/custom
    ProxyPassReverse /custom http://127.0.0.1:9000/custom
    ProxyPreserveHost On
    

    # cache static files                                                            
    <IfModule mod_rewrite.c>
     <Location /custom/gWidgetsWWW2/>
        Header Set Cache-Control "public, s-maxage=3600, max-age=3600, must-revalidate"
     </Location>
    </IfModule>
    
\end{verbatim}

\subsubsection{single or multi threaded}
\label{sec:single-or-multi}

The \pkg{Rook} package uses \R's httpd server, which is single
threaded and blocking. This simplicity avoids issues common in web
programming where shared resources can be accessed out of order. The
simplest use of \pkg{gWidgetsWWW2} uses a session manager which simply
keeps an internal list of environments for each requested page that
has not been closed or reloaded. For a single threaded setup this is
fine, but not for a multi-threaded setup as the different processes
could not easily share this list. 

For a multi-threaded setup (such as the three processes started in the
Rook example referenced above) the session manager must be told to
share the evaluation environments. To do this, files are used to store
the evaluation environment. One passes a \code{TRUE} value to
\code{use.filehash} and optionally specifies a directory to hold the
sessions.


\subsubsection{RApache}
\label{sec:rapache}

As of \code{rapache} version {1.1.15}, one can integrate \pkg{Rook} applications
within \code{rapache}. However, this package does not play along so
nicely. There are issues with \code{POST} requests getting processed
properly and issues with overall speed. This is an area where some
progress needs to be made before it is useful.



% \section{Security}
% \label{sec:security}

% Security -- is a big deal. Web servers can be hacked, and if hacked
% the hacker has full access to the server. This can be scary. The local
% server blocks all requests that are not to the local IP 127.0.0.1,
% preventing outside access. As for outside access, although it is not
% believed that RApache is any less secure than other Apache modules,
% you can protect yourself by running the entire setup within a virtual
% machine. There is easy to install, reasonably priced (or free)
% commercial software from VMWare (\url{www.vmware.com}). For
% open-source fans, the VirtualBox project (\url{www.virtualbox.org})
% also has software. One can install this, then run the author provided
% appliance. Or one can install the virtual software, install a host OS
% (ubuntu linux say), then install Apache and R then RApache etc. It
% actually isn't so hard to do.

% The call from the web server back into RApache can also be source of
% insecurity. The \pkg{gWidgetsWWW} package allows only a limited number
% of calls back from a web page, which should in theory be secure. But
% if the script is not secure, there is nothing the package can
% do. Scripts must \textit{never} trust that data sent from the web page
% to the server is safe. It should be coerced into any desired format,
% and never evaluated. Using \code{eval} say allows any one to run R
% commands on the server which given the power of R means they have full
% control of the server.

% The web server communicates back to the web browser through an AJAX
% call. This is supposed to be secure, as only javascript code that
% originates from the same server as the initial page is executed.

\end{document}
